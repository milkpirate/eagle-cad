
capslocker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000a16  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800068  00000a1e  00000a92  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005f  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020b  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bf0  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b5  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006a8  00000000  00000000  0000215b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c6  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004e0  00000000  00000000  00002d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  0000323a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	ae c2       	rjmp	.+1372   	; 0x560 <__vector_1>
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	62 c0       	rjmp	.+196    	; 0xd8 <__bad_interrupt>
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	60 c0       	rjmp	.+192    	; 0xd8 <__bad_interrupt>
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>

0000001e <usbDescriptorHidReport>:
  1e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  2e:	75 01 95 08 81 02 95 01 75 08 25 65 19 00 29 65     u.......u.%e..)e
  3e:	81 00 c0                                            ...

00000041 <usbDescriptorString0>:
  41:	04 03 09 04                                         ....

00000045 <usbDescriptorStringVendor>:
  45:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  55:	74 00                                               t.

00000057 <usbDescriptorStringDevice>:
  57:	16 03 43 00 61 00 70 00 73 00 4c 00 6f 00 63 00     ..C.a.p.s.L.o.c.
  67:	6b 00 65 00 72 00                                   k.e.r.

0000006d <usbDescriptorDevice>:
  6d:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  7d:	00 01                                               ..

0000007f <usbDescriptorConfiguration>:
  7f:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
  8f:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
  9f:	00 0a 00                                            ...

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf e5       	ldi	r28, 0x5F	; 95
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	a0 e6       	ldi	r26, 0x60	; 96
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e6 e1       	ldi	r30, 0x16	; 22
  b6:	fa e0       	ldi	r31, 0x0A	; 10
  b8:	02 c0       	rjmp	.+4      	; 0xbe <.do_copy_data_start>

000000ba <.do_copy_data_loop>:
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0

000000be <.do_copy_data_start>:
  be:	a8 36       	cpi	r26, 0x68	; 104
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <.do_copy_data_loop>

000000c4 <__do_clear_bss>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	a8 e6       	ldi	r26, 0x68	; 104
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a7 3a       	cpi	r26, 0xA7	; 167
  d0:	b1 07       	cpc	r27, r17
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	39 d0       	rcall	.+114    	; 0x148 <main>
  d6:	9e c4       	rjmp	.+2364   	; 0xa14 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <buildReport>:
  da:	80 91 6d 00 	lds	r24, 0x006D
  de:	88 23       	and	r24, r24
  e0:	11 f4       	brne	.+4      	; 0xe6 <buildReport+0xc>
  e2:	99 e3       	ldi	r25, 0x39	; 57
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <buildReport+0xe>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 6d 00 	sts	0x006D, r24
  ee:	10 92 6a 00 	sts	0x006A, r1
  f2:	90 93 6b 00 	sts	0x006B, r25
  f6:	08 95       	ret

000000f8 <usbFunctionSetup>:
  f8:	fc 01       	movw	r30, r24
  fa:	8a e6       	ldi	r24, 0x6A	; 106
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 8c 00 	sts	0x008C, r25
 102:	80 93 8b 00 	sts	0x008B, r24
 106:	80 81       	ld	r24, Z
 108:	80 76       	andi	r24, 0x60	; 96
 10a:	80 32       	cpi	r24, 0x20	; 32
 10c:	d1 f4       	brne	.+52     	; 0x142 <usbFunctionSetup+0x4a>
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	21 f4       	brne	.+8      	; 0x11c <usbFunctionSetup+0x24>
 114:	e2 df       	rcall	.-60     	; 0xda <buildReport>
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	49 f4       	brne	.+18     	; 0x132 <usbFunctionSetup+0x3a>
 120:	8c e6       	ldi	r24, 0x6C	; 108
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 8c 00 	sts	0x008C, r25
 128:	80 93 8b 00 	sts	0x008B, r24
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
 132:	8a 30       	cpi	r24, 0x0A	; 10
 134:	31 f4       	brne	.+12     	; 0x142 <usbFunctionSetup+0x4a>
 136:	83 81       	ldd	r24, Z+3	; 0x03
 138:	80 93 6c 00 	sts	0x006C, r24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <main>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	c0 d3       	rcall	.+1920   	; 0x8d2 <__eeprom_read_byte_1C1D1E>
 152:	80 2d       	mov	r24, r0
 154:	8f 3f       	cpi	r24, 0xFF	; 255
 156:	09 f0       	breq	.+2      	; 0x15a <main+0x12>
 158:	81 bf       	out	0x31, r24	; 49
 15a:	b8 9a       	sbi	0x17, 0	; 23
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	83 eb       	ldi	r24, 0xB3	; 179
 160:	91 ef       	ldi	r25, 0xF1	; 241
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <__stack+0x3>
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	24 31       	cpi	r18, 0x14	; 20
 16a:	c9 f7       	brne	.-14     	; 0x15e <main+0x16>
 16c:	b8 98       	cbi	0x17, 0	; 23
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2e e0       	ldi	r18, 0x0E	; 14
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	a8 95       	wdr
 17a:	81 bd       	out	0x21, r24	; 33
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	21 bd       	out	0x21, r18	; 33
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	80 bf       	out	0x30, r24	; 48
 184:	86 e7       	ldi	r24, 0x76	; 118
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	90 93 6f 00 	sts	0x006F, r25
 18c:	80 93 6e 00 	sts	0x006E, r24
 190:	79 d0       	rcall	.+242    	; 0x284 <usbInit>
 192:	78 94       	sei
 194:	ca e6       	ldi	r28, 0x6A	; 106
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	a8 95       	wdr
 19a:	a0 d0       	rcall	.+320    	; 0x2dc <usbPoll>
 19c:	80 91 62 00 	lds	r24, 0x0062
 1a0:	84 ff       	sbrs	r24, 4
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <__stack+0x55>
 1a4:	80 91 6d 00 	lds	r24, 0x006D
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	20 f4       	brcc	.+8      	; 0x1b4 <__stack+0x55>
 1ac:	96 df       	rcall	.-212    	; 0xda <buildReport>
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	ce 01       	movw	r24, r28
 1b2:	72 d0       	rcall	.+228    	; 0x298 <usbSetInterrupt>
 1b4:	08 b6       	in	r0, 0x38	; 56
 1b6:	02 fe       	sbrs	r0, 2
 1b8:	ef cf       	rjmp	.-34     	; 0x198 <__stack+0x39>
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	88 bf       	out	0x38, r24	; 56
 1be:	80 91 68 00 	lds	r24, 0x0068
 1c2:	90 91 69 00 	lds	r25, 0x0069
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 69 00 	sts	0x0069, r25
 1cc:	80 93 68 00 	sts	0x0068, r24
 1d0:	20 91 6e 00 	lds	r18, 0x006E
 1d4:	30 91 6f 00 	lds	r19, 0x006F
 1d8:	82 17       	cp	r24, r18
 1da:	93 07       	cpc	r25, r19
 1dc:	e8 f2       	brcs	.-70     	; 0x198 <__stack+0x39>
 1de:	6a d3       	rcall	.+1748   	; 0x8b4 <rand>
 1e0:	8d 5e       	subi	r24, 0xED	; 237
 1e2:	94 4f       	sbci	r25, 0xF4	; 244
 1e4:	90 93 6f 00 	sts	0x006F, r25
 1e8:	80 93 6e 00 	sts	0x006E, r24
 1ec:	10 92 69 00 	sts	0x0069, r1
 1f0:	10 92 68 00 	sts	0x0068, r1
 1f4:	10 92 6d 00 	sts	0x006D, r1
 1f8:	cf cf       	rjmp	.-98     	; 0x198 <__stack+0x39>

000001fa <usbEventResetReady>:
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	d8 2e       	mov	r13, r24
 20c:	ff 24       	eor	r15, r15
 20e:	c0 e0       	ldi	r28, 0x00	; 0
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	ef 2c       	mov	r14, r15
 214:	ed 0c       	add	r14, r13
 216:	e1 be       	out	0x31, r14	; 49
 218:	90 d1       	rcall	.+800    	; 0x53a <usbMeasureFrameLength>
 21a:	8c 01       	movw	r16, r24
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	04 33       	cpi	r16, 0x34	; 52
 220:	18 07       	cpc	r17, r24
 222:	0c f4       	brge	.+2      	; 0x226 <usbEventResetReady+0x2c>
 224:	fe 2c       	mov	r15, r14
 226:	d6 94       	lsr	r13
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	c8 30       	cpi	r28, 0x08	; 8
 22c:	d1 05       	cpc	r29, r1
 22e:	89 f7       	brne	.-30     	; 0x212 <usbEventResetReady+0x18>
 230:	fa 94       	dec	r15
 232:	f1 be       	out	0x31, r15	; 49
 234:	f3 94       	inc	r15
 236:	cf 2d       	mov	r28, r15
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	10 c0       	rjmp	.+32     	; 0x25e <usbEventResetReady+0x64>
 23e:	7d d1       	rcall	.+762    	; 0x53a <usbMeasureFrameLength>
 240:	84 53       	subi	r24, 0x34	; 52
 242:	99 40       	sbci	r25, 0x09	; 9
 244:	97 ff       	sbrs	r25, 7
 246:	03 c0       	rjmp	.+6      	; 0x24e <usbEventResetReady+0x54>
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	80 17       	cp	r24, r16
 250:	91 07       	cpc	r25, r17
 252:	14 f4       	brge	.+4      	; 0x258 <usbEventResetReady+0x5e>
 254:	f1 b6       	in	r15, 0x31	; 49
 256:	8c 01       	movw	r16, r24
 258:	81 b7       	in	r24, 0x31	; 49
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	81 bf       	out	0x31, r24	; 49
 25e:	81 b7       	in	r24, 0x31	; 49
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	c8 17       	cp	r28, r24
 264:	d9 07       	cpc	r29, r25
 266:	5c f7       	brge	.-42     	; 0x23e <usbEventResetReady+0x44>
 268:	f1 be       	out	0x31, r15	; 49
 26a:	81 b7       	in	r24, 0x31	; 49
 26c:	a0 e0       	ldi	r26, 0x00	; 0
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	08 2e       	mov	r0, r24
 272:	37 d3       	rcall	.+1646   	; 0x8e2 <__eeprom_write_byte_1C1D1E>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 284:	85 b7       	in	r24, 0x35	; 53
 286:	83 60       	ori	r24, 0x03	; 3
 288:	85 bf       	out	0x35, r24	; 53
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 28a:	8b b7       	in	r24, 0x3b	; 59
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 290:	83 ec       	ldi	r24, 0xC3	; 195
 292:	80 93 7d 00 	sts	0x007D, r24
 296:	08 95       	ret

00000298 <usbSetInterrupt>:

/* ------------------------------------------------------------------------- */

#if USB_CFG_HAVE_INTRIN_ENDPOINT
USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 298:	1f 93       	push	r17
 29a:	dc 01       	movw	r26, r24
 29c:	16 2f       	mov	r17, r22
#endif
#if 0   /* No runtime checks! Caller is responsible for valid data! */
    if(len > 8) /* interrupt transfers are limited to 8 bytes */
        len = 8;
#endif
    if(usbTxLen1 & 0x10){   /* packet buffer was empty */
 29e:	80 91 62 00 	lds	r24, 0x0062
 2a2:	84 ff       	sbrs	r24, 4
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <usbSetInterrupt+0x1c>
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
 2a6:	80 91 7d 00 	lds	r24, 0x007D
 2aa:	98 e8       	ldi	r25, 0x88	; 136
 2ac:	89 27       	eor	r24, r25
 2ae:	80 93 7d 00 	sts	0x007D, r24
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <usbSetInterrupt+0x22>
    }else{
        usbTxLen1 = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 2b4:	8a e5       	ldi	r24, 0x5A	; 90
 2b6:	80 93 62 00 	sts	0x0062, r24
 2ba:	91 2f       	mov	r25, r17
 2bc:	ee e7       	ldi	r30, 0x7E	; 126
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <usbSetInterrupt+0x2e>
    }
    p = usbTxBuf1 + 1;
    for(i=len;i--;)
        *p++ = *data++;
 2c2:	8d 91       	ld	r24, X+
 2c4:	81 93       	st	Z+, r24
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
    }else{
        usbTxLen1 = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = usbTxBuf1 + 1;
    for(i=len;i--;)
 2c6:	91 50       	subi	r25, 0x01	; 1
 2c8:	e0 f7       	brcc	.-8      	; 0x2c2 <usbSetInterrupt+0x2a>
        *p++ = *data++;
    usbCrc16Append(&usbTxBuf1[1], len);
 2ca:	61 2f       	mov	r22, r17
 2cc:	8e e7       	ldi	r24, 0x7E	; 126
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	30 d1       	rcall	.+608    	; 0x532 <usbCrc16Append>
    usbTxLen1 = len + 4;    /* len must be given including sync byte */
 2d2:	1c 5f       	subi	r17, 0xFC	; 252
 2d4:	10 93 62 00 	sts	0x0062, r17
 2d8:	1f 91       	pop	r17
 2da:	08 95       	ret

000002dc <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
schar   len;
uchar   i;

    if((len = usbRxLen) > 0){
 2e4:	90 91 8d 00 	lds	r25, 0x008D
 2e8:	19 16       	cp	r1, r25
 2ea:	0c f0       	brlt	.+2      	; 0x2ee <usbPoll+0x12>
 2ec:	a8 c0       	rjmp	.+336    	; 0x43e <usbPoll+0x162>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
 2ee:	20 91 8a 00 	lds	r18, 0x008A
    if(usbRxToken < 0x10){  /* endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return; /* no reply expected, hence no usbMsgPtr, usbMsgFlags, usbMsgLen set */
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 2f2:	80 91 89 00 	lds	r24, 0x0089
 2f6:	8d 32       	cpi	r24, 0x2D	; 45
 2f8:	09 f0       	breq	.+2      	; 0x2fc <usbPoll+0x20>
 2fa:	99 c0       	rjmp	.+306    	; 0x42e <usbPoll+0x152>
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
 2fc:	8a e5       	ldi	r24, 0x5A	; 90
 2fe:	80 93 61 00 	sts	0x0061, r24
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
 302:	9b 30       	cpi	r25, 0x0B	; 11
 304:	09 f0       	breq	.+2      	; 0x308 <usbPoll+0x2c>
 306:	93 c0       	rjmp	.+294    	; 0x42e <usbPoll+0x152>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
 308:	cd e9       	ldi	r28, 0x9D	; 157
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	c2 1b       	sub	r28, r18
 30e:	d1 09       	sbc	r29, r1
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
            uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
            if(type == USBRQ_TYPE_STANDARD){
 310:	88 81       	ld	r24, Y
 312:	80 76       	andi	r24, 0x60	; 96
 314:	09 f0       	breq	.+2      	; 0x318 <usbPoll+0x3c>
 316:	7c c0       	rjmp	.+248    	; 0x410 <usbPoll+0x134>
                #define SET_REPLY_LEN(len)  replyLen = (len); usbMsgPtr = replyData
                /* This macro ensures that replyLen and usbMsgPtr are always set in the same way.
                 * That allows optimization of common code in if() branches */
                uchar *replyData = usbTxBuf + 9; /* there is 3 bytes free space at the end of the buffer */
                replyData[0] = 0;   /* common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 318:	2b e7       	ldi	r18, 0x7B	; 123
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	10 92 7b 00 	sts	0x007B, r1
                if(rq->bRequest == USBRQ_GET_STATUS){           /* 0 */
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	88 23       	and	r24, r24
 324:	41 f4       	brne	.+16     	; 0x336 <usbPoll+0x5a>
#endif
#if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_IMPLEMENT_HALT
                    if(recipient == USBRQ_RCPT_ENDPOINT && rq->wIndex.bytes[0] == 0x81)   /* request status for endpoint 1 */
                        replyData[0] = usbTxLen1 == USBPID_STALL;
#endif
                    replyData[1] = 0;
 326:	10 92 7c 00 	sts	0x007C, r1
                    SET_REPLY_LEN(2);
 32a:	30 93 8c 00 	sts	0x008C, r19
 32e:	20 93 8b 00 	sts	0x008B, r18
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	70 c0       	rjmp	.+224    	; 0x416 <usbPoll+0x13a>
                }else if(rq->bRequest == USBRQ_SET_ADDRESS){    /* 5 */
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	21 f4       	brne	.+8      	; 0x342 <usbPoll+0x66>
                    usbNewDeviceAddr = rq->wValue.bytes[0];
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	80 93 8e 00 	sts	0x008E, r24
 340:	65 c0       	rjmp	.+202    	; 0x40c <usbPoll+0x130>
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
 342:	86 30       	cpi	r24, 0x06	; 6
 344:	09 f0       	breq	.+2      	; 0x348 <usbPoll+0x6c>
 346:	46 c0       	rjmp	.+140    	; 0x3d4 <usbPoll+0xf8>
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
                    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){ /* 1 */
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	19 f4       	brne	.+6      	; 0x354 <usbPoll+0x78>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 34e:	8d e6       	ldi	r24, 0x6D	; 109
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	1b c0       	rjmp	.+54     	; 0x38a <usbPoll+0xae>
                    }else if(rq->wValue.bytes[1] == USBDESCR_CONFIG){   /* 2 */
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	41 f4       	brne	.+16     	; 0x368 <usbPoll+0x8c>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 358:	8f e7       	ldi	r24, 0x7F	; 127
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 8c 00 	sts	0x008C, r25
 360:	80 93 8b 00 	sts	0x008B, r24
 364:	92 e2       	ldi	r25, 0x22	; 34
 366:	5a c0       	rjmp	.+180    	; 0x41c <usbPoll+0x140>
                    }else if(rq->wValue.bytes[1] == USBDESCR_STRING){   /* 3 */
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	01 f5       	brne	.+64     	; 0x3ac <usbPoll+0xd0>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
                        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
                            flags &= ~USB_FLG_MSGPTR_IS_ROM;
                        replyLen = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	88 23       	and	r24, r24
 370:	41 f4       	brne	.+16     	; 0x382 <usbPoll+0xa6>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 372:	81 e4       	ldi	r24, 0x41	; 65
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 8c 00 	sts	0x008C, r25
 37a:	80 93 8b 00 	sts	0x008B, r24
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	4d c0       	rjmp	.+154    	; 0x41c <usbPoll+0x140>
                        }else if(rq->wValue.bytes[0] == 1){
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	41 f4       	brne	.+16     	; 0x396 <usbPoll+0xba>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 386:	85 e4       	ldi	r24, 0x45	; 69
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 8c 00 	sts	0x008C, r25
 38e:	80 93 8b 00 	sts	0x008B, r24
 392:	92 e1       	ldi	r25, 0x12	; 18
 394:	43 c0       	rjmp	.+134    	; 0x41c <usbPoll+0x140>
                        }else if(rq->wValue.bytes[0] == 2){
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	09 f0       	breq	.+2      	; 0x39c <usbPoll+0xc0>
 39a:	3f c0       	rjmp	.+126    	; 0x41a <usbPoll+0x13e>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 39c:	87 e5       	ldi	r24, 0x57	; 87
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	90 93 8c 00 	sts	0x008C, r25
 3a4:	80 93 8b 00 	sts	0x008B, r24
 3a8:	96 e1       	ldi	r25, 0x16	; 22
 3aa:	38 c0       	rjmp	.+112    	; 0x41c <usbPoll+0x140>
                        }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                            replyLen = usbFunctionDescriptor(rq);
                        }
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID){          /* 0x21 */
 3ac:	81 32       	cpi	r24, 0x21	; 33
 3ae:	41 f4       	brne	.+16     	; 0x3c0 <usbPoll+0xe4>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 3b0:	81 e9       	ldi	r24, 0x91	; 145
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 8c 00 	sts	0x008C, r25
 3b8:	80 93 8b 00 	sts	0x008B, r24
 3bc:	99 e0       	ldi	r25, 0x09	; 9
 3be:	2e c0       	rjmp	.+92     	; 0x41c <usbPoll+0x140>
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID_REPORT){   /* 0x22 */
 3c0:	82 32       	cpi	r24, 0x22	; 34
 3c2:	59 f5       	brne	.+86     	; 0x41a <usbPoll+0x13e>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 3c4:	8e e1       	ldi	r24, 0x1E	; 30
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 8c 00 	sts	0x008C, r25
 3cc:	80 93 8b 00 	sts	0x008B, r24
 3d0:	93 e2       	ldi	r25, 0x23	; 35
 3d2:	24 c0       	rjmp	.+72     	; 0x41c <usbPoll+0x140>
#endif  /* USB_CFG_DESCR_PROPS_HID_REPORT */
                    }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                        replyLen = usbFunctionDescriptor(rq);
                    }
                }else if(rq->bRequest == USBRQ_GET_CONFIGURATION){  /* 8 */
 3d4:	88 30       	cpi	r24, 0x08	; 8
 3d6:	39 f4       	brne	.+14     	; 0x3e6 <usbPoll+0x10a>
                    replyData = &usbConfiguration;  /* send current configuration value */
                    SET_REPLY_LEN(1);
 3d8:	80 e9       	ldi	r24, 0x90	; 144
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 8c 00 	sts	0x008C, r25
 3e0:	80 93 8b 00 	sts	0x008B, r24
 3e4:	0c c0       	rjmp	.+24     	; 0x3fe <usbPoll+0x122>
                }else if(rq->bRequest == USBRQ_SET_CONFIGURATION){  /* 9 */
 3e6:	89 30       	cpi	r24, 0x09	; 9
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <usbPoll+0x116>
                    usbConfiguration = rq->wValue.bytes[0];
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	80 93 90 00 	sts	0x0090, r24
 3f0:	0d c0       	rjmp	.+26     	; 0x40c <usbPoll+0x130>
                    usbResetStall();
                }else if(rq->bRequest == USBRQ_GET_INTERFACE){      /* 10 */
 3f2:	8a 30       	cpi	r24, 0x0A	; 10
 3f4:	31 f4       	brne	.+12     	; 0x402 <usbPoll+0x126>
                    SET_REPLY_LEN(1);
 3f6:	30 93 8c 00 	sts	0x008C, r19
 3fa:	20 93 8b 00 	sts	0x008B, r18
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0a c0       	rjmp	.+20     	; 0x416 <usbPoll+0x13a>
#if USB_CFG_HAVE_INTRIN_ENDPOINT
                }else if(rq->bRequest == USBRQ_SET_INTERFACE){      /* 11 */
 402:	8b 30       	cpi	r24, 0x0B	; 11
 404:	19 f4       	brne	.+6      	; 0x40c <usbPoll+0x130>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 406:	83 ec       	ldi	r24, 0xC3	; 195
 408:	80 93 7d 00 	sts	0x007D, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	03 c0       	rjmp	.+6      	; 0x416 <usbPoll+0x13a>
                    /* 1: CLEAR_FEATURE, 3: SET_FEATURE, 7: SET_DESCRIPTOR */
                    /* 12: SYNCH_FRAME */
                }
                #undef SET_REPLY_LEN
            }else{  /* not a standard request -- must be vendor or class request */
                replyLen = usbFunctionSetup(data);
 410:	ce 01       	movw	r24, r28
 412:	72 de       	rcall	.-796    	; 0xf8 <usbFunctionSetup>
 414:	98 2f       	mov	r25, r24
 416:	20 e8       	ldi	r18, 0x80	; 128
 418:	02 c0       	rjmp	.+4      	; 0x41e <usbPoll+0x142>
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	20 ec       	ldi	r18, 0xC0	; 192
                    replyLen = rq->wLength.bytes[0];    /* IN transfers only */
                }
                flags &= ~USB_FLG_USE_DEFAULT_RW;  /* we have no valid msg, use user supplied read/write functions */
            }else   /* The 'else' prevents that we limit a replyLen of 0xff to the maximum transfer len. */
#endif
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])  /* limit length to max */
 41e:	8f 81       	ldd	r24, Y+7	; 0x07
 420:	88 23       	and	r24, r24
 422:	39 f4       	brne	.+14     	; 0x432 <usbPoll+0x156>
 424:	8e 81       	ldd	r24, Y+6	; 0x06
 426:	89 17       	cp	r24, r25
 428:	20 f4       	brcc	.+8      	; 0x432 <usbPoll+0x156>
 42a:	98 2f       	mov	r25, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <usbPoll+0x156>
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	20 e8       	ldi	r18, 0x80	; 128
            }
            flags = 0;    /* start with a DATA1 package, stay with user supplied write() function */
        }
#endif
    }
    usbMsgFlags = flags;
 432:	20 93 71 00 	sts	0x0071, r18
    usbMsgLen = replyLen;
 436:	90 93 60 00 	sts	0x0060, r25
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 43a:	10 92 8d 00 	sts	0x008D, r1
#endif
    }
    if(usbTxLen & 0x10){ /* transmit system idle */
 43e:	80 91 61 00 	lds	r24, 0x0061
 442:	84 ff       	sbrs	r24, 4
 444:	45 c0       	rjmp	.+138    	; 0x4d0 <usbPoll+0x1f4>
        if(usbMsgLen != 0xff){  /* transmit data pending? */
 446:	80 91 60 00 	lds	r24, 0x0060
 44a:	8f 3f       	cpi	r24, 0xFF	; 255
 44c:	09 f4       	brne	.+2      	; 0x450 <usbPoll+0x174>
 44e:	40 c0       	rjmp	.+128    	; 0x4d0 <usbPoll+0x1f4>
 450:	18 2f       	mov	r17, r24
 452:	89 30       	cpi	r24, 0x09	; 9
 454:	08 f0       	brcs	.+2      	; 0x458 <usbPoll+0x17c>
 456:	18 e0       	ldi	r17, 0x08	; 8
uchar   wantLen, len, txLen, token;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 458:	81 1b       	sub	r24, r17
 45a:	80 93 60 00 	sts	0x0060, r24
    token = USBPID_DATA1;
    if(usbMsgFlags & USB_FLG_TX_PACKET)
 45e:	80 91 71 00 	lds	r24, 0x0071
 462:	80 ff       	sbrs	r24, 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <usbPoll+0x18e>
 466:	03 ec       	ldi	r16, 0xC3	; 195
 468:	01 c0       	rjmp	.+2      	; 0x46c <usbPoll+0x190>
 46a:	0b e4       	ldi	r16, 0x4B	; 75
        token = USBPID_DATA0;
    usbMsgFlags++;
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 71 00 	sts	0x0071, r24
static uchar usbRead(uchar *data, uchar len)
{
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
 472:	20 91 8b 00 	lds	r18, 0x008B
 476:	30 91 8c 00 	lds	r19, 0x008C
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 47a:	86 fd       	sbrc	r24, 6
 47c:	05 c0       	rjmp	.+10     	; 0x488 <usbPoll+0x1ac>
 47e:	91 2f       	mov	r25, r17
 480:	f9 01       	movw	r30, r18
 482:	a3 e7       	ldi	r26, 0x73	; 115
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <usbPoll+0x1c6>
 488:	91 2f       	mov	r25, r17
 48a:	f9 01       	movw	r30, r18
 48c:	a3 e7       	ldi	r26, 0x73	; 115
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	03 c0       	rjmp	.+6      	; 0x498 <usbPoll+0x1bc>
            while(i--){
                uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
 492:	84 91       	lpm	r24, Z
                *data++ = c;
 494:	8d 93       	st	X+, r24
                r++;
 496:	31 96       	adiw	r30, 0x01	; 1
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
            while(i--){
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	d8 f7       	brcc	.-10     	; 0x492 <usbPoll+0x1b6>
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <usbPoll+0x1ca>
                *data++ = c;
                r++;
            }
        }else{                  /* RAM data */
            while(i--)
                *data++ = *r++;
 49e:	81 91       	ld	r24, Z+
 4a0:	8d 93       	st	X+, r24
                uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
                *data++ = c;
                r++;
            }
        }else{                  /* RAM data */
            while(i--)
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	e0 f7       	brcc	.-8      	; 0x49e <usbPoll+0x1c2>
 4a6:	c9 01       	movw	r24, r18
 4a8:	81 0f       	add	r24, r17
 4aa:	91 1d       	adc	r25, r1
                *data++ = *r++;
        }
        usbMsgPtr = r;
 4ac:	90 93 8c 00 	sts	0x008C, r25
 4b0:	80 93 8b 00 	sts	0x008B, r24
    if(usbMsgFlags & USB_FLG_TX_PACKET)
        token = USBPID_DATA0;
    usbMsgFlags++;
    len = usbRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 4b4:	61 2f       	mov	r22, r17
 4b6:	83 e7       	ldi	r24, 0x73	; 115
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	3b d0       	rcall	.+118    	; 0x532 <usbCrc16Append>
        txLen = len + 4;    /* length including sync byte */
        if(len < 8)         /* a partial package identifies end of message */
 4bc:	18 30       	cpi	r17, 0x08	; 8
 4be:	19 f0       	breq	.+6      	; 0x4c6 <usbPoll+0x1ea>
            usbMsgLen = 0xff;
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	80 93 60 00 	sts	0x0060, r24
    }else{
        txLen = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = 0xff;
    }
    usbTxBuf[0] = token;
 4c6:	00 93 72 00 	sts	0x0072, r16
        token = USBPID_DATA0;
    usbMsgFlags++;
    len = usbRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
        txLen = len + 4;    /* length including sync byte */
 4ca:	1c 5f       	subi	r17, 0xFC	; 252
    }else{
        txLen = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = 0xff;
    }
    usbTxBuf[0] = token;
    usbTxLen = txLen;
 4cc:	10 93 61 00 	sts	0x0061, r17
 4d0:	9a e0       	ldi	r25, 0x0A	; 10
/* We want to do
 *     return (USBIN & USBMASK);
 * here, but the compiler does int-expansion acrobatics.
 * We can avoid this by assigning to a char-sized variable.
 */
    rval = USBIN & USBMASK;
 4d2:	86 b3       	in	r24, 0x16	; 22
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
        if(isNotSE0())
 4d4:	85 70       	andi	r24, 0x05	; 5
 4d6:	31 f4       	brne	.+12     	; 0x4e4 <usbPoll+0x208>
    if(usbTxLen & 0x10){ /* transmit system idle */
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
 4d8:	91 50       	subi	r25, 0x01	; 1
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <usbPoll+0x1f6>
        if(isNotSE0())
            break;
    }
    if(i == 0){ /* RESET condition, called multiple times during reset */
        usbNewDeviceAddr = 0;
 4dc:	10 92 8e 00 	sts	0x008E, r1
        usbDeviceAddr = 0;
 4e0:	10 92 88 00 	sts	0x0088, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	99 23       	and	r25, r25
 4e8:	09 f4       	brne	.+2      	; 0x4ec <usbPoll+0x210>
 4ea:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
 4ec:	80 91 70 00 	lds	r24, 0x0070
 4f0:	81 17       	cp	r24, r17
 4f2:	29 f0       	breq	.+10     	; 0x4fe <usbPoll+0x222>
        USB_RESET_HOOK(isReset);
 4f4:	11 23       	and	r17, r17
 4f6:	09 f4       	brne	.+2      	; 0x4fa <usbPoll+0x21e>
 4f8:	80 de       	rcall	.-768    	; 0x1fa <usbEventResetReady>
        wasReset = isReset;
 4fa:	10 93 70 00 	sts	0x0070, r17
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	08 95       	ret

00000508 <usbCrc16>:
 508:	a8 2f       	mov	r26, r24
 50a:	b9 2f       	mov	r27, r25
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	50 ea       	ldi	r21, 0xA0	; 160
 514:	60 95       	com	r22

00000516 <crcByteLoop>:
 516:	6f 5f       	subi	r22, 0xFF	; 255
 518:	58 f4       	brcc	.+22     	; 0x530 <crcReady>
 51a:	2d 91       	ld	r18, X+
 51c:	38 ef       	ldi	r19, 0xF8	; 248
 51e:	82 27       	eor	r24, r18

00000520 <crcBitLoop>:
 520:	97 95       	ror	r25
 522:	87 95       	ror	r24
 524:	10 f0       	brcs	.+4      	; 0x52a <crcNoXor>
 526:	84 27       	eor	r24, r20
 528:	95 27       	eor	r25, r21

0000052a <crcNoXor>:
 52a:	3f 5f       	subi	r19, 0xFF	; 255
 52c:	c8 f3       	brcs	.-14     	; 0x520 <crcBitLoop>
 52e:	f3 cf       	rjmp	.-26     	; 0x516 <crcByteLoop>

00000530 <crcReady>:
 530:	08 95       	ret

00000532 <usbCrc16Append>:
 532:	ea df       	rcall	.-44     	; 0x508 <usbCrc16>
 534:	8d 93       	st	X+, r24
 536:	9d 93       	st	X+, r25
 538:	08 95       	ret

0000053a <usbMeasureFrameLength>:
 53a:	a6 e0       	ldi	r26, 0x06	; 6
 53c:	88 27       	eor	r24, r24
 53e:	99 27       	eor	r25, r25

00000540 <usbMFTime16>:
 540:	aa 95       	dec	r26
 542:	69 f0       	breq	.+26     	; 0x55e <usbMFTimeout>

00000544 <usbMFWaitStrobe>:
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	e1 f3       	breq	.-8      	; 0x540 <usbMFTime16>
 548:	b0 99       	sbic	0x16, 0	; 22
 54a:	fc cf       	rjmp	.-8      	; 0x544 <usbMFWaitStrobe>

0000054c <usbMFWaitIdle>:
 54c:	b0 9b       	sbis	0x16, 0	; 22
 54e:	fe cf       	rjmp	.-4      	; 0x54c <usbMFWaitIdle>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	99 27       	eor	r25, r25

00000554 <usbMFWaitLoop>:
 554:	a6 b3       	in	r26, 0x16	; 22
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	11 f0       	breq	.+4      	; 0x55e <usbMFTimeout>
 55a:	a5 70       	andi	r26, 0x05	; 5
 55c:	d9 f7       	brne	.-10     	; 0x554 <usbMFWaitLoop>

0000055e <usbMFTimeout>:
 55e:	08 95       	ret

00000560 <__vector_1>:
 560:	cf 93       	push	r28
 562:	cf b7       	in	r28, 0x3f	; 63
 564:	cf 93       	push	r28

00000566 <waitForJ>:
 566:	b0 9b       	sbis	0x16, 0	; 22
 568:	fe cf       	rjmp	.-4      	; 0x566 <waitForJ>

0000056a <waitForK>:
 56a:	b0 9b       	sbis	0x16, 0	; 22
 56c:	0b c0       	rjmp	.+22     	; 0x584 <foundK>
 56e:	b0 9b       	sbis	0x16, 0	; 22
 570:	09 c0       	rjmp	.+18     	; 0x584 <foundK>
 572:	b0 9b       	sbis	0x16, 0	; 22
 574:	07 c0       	rjmp	.+14     	; 0x584 <foundK>
 576:	b0 9b       	sbis	0x16, 0	; 22
 578:	05 c0       	rjmp	.+10     	; 0x584 <foundK>
 57a:	b0 9b       	sbis	0x16, 0	; 22
 57c:	03 c0       	rjmp	.+6      	; 0x584 <foundK>
 57e:	b0 9b       	sbis	0x16, 0	; 22
 580:	01 c0       	rjmp	.+2      	; 0x584 <foundK>
 582:	d5 c0       	rjmp	.+426    	; 0x72e <sofError>

00000584 <foundK>:
 584:	0f 92       	push	r0
 586:	df 93       	push	r29
 588:	c0 91 8a 00 	lds	r28, 0x008A
 58c:	dd 27       	eor	r29, r29
 58e:	cf 56       	subi	r28, 0x6F	; 111
 590:	df 4f       	sbci	r29, 0xFF	; 255
 592:	01 2e       	mov	r0, r17
 594:	b0 9b       	sbis	0x16, 0	; 22
 596:	03 c0       	rjmp	.+6      	; 0x59e <haveTwoBitsK>
 598:	df 91       	pop	r29
 59a:	0f 90       	pop	r0
 59c:	e6 cf       	rjmp	.-52     	; 0x56a <waitForK>

0000059e <haveTwoBitsK>:
 59e:	2f 93       	push	r18
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	4f 93       	push	r20
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	4f 6f       	ori	r20, 0xFF	; 255
 5aa:	06 b3       	in	r16, 0x16	; 22
 5ac:	00 fb       	bst	r16, 0
 5ae:	20 f9       	bld	r18, 0
 5b0:	5f 93       	push	r21
 5b2:	3f 93       	push	r19
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	3b e0       	ldi	r19, 0x0B	; 11
 5b8:	65 c0       	rjmp	.+202    	; 0x684 <rxbit1>

000005ba <continueWithBit5>:
 5ba:	16 b3       	in	r17, 0x16	; 22
 5bc:	01 26       	eor	r0, r17
 5be:	50 29       	or	r21, r0
 5c0:	50 fd       	sbrc	r21, 0
 5c2:	c8 95       	lpm
 5c4:	56 b3       	in	r21, 0x16	; 22
 5c6:	01 27       	eor	r16, r17
 5c8:	00 fb       	bst	r16, 0
 5ca:	25 f9       	bld	r18, 5
 5cc:	2f 73       	andi	r18, 0x3F	; 63
 5ce:	06 b3       	in	r16, 0x16	; 22
 5d0:	b1 f0       	breq	.+44     	; 0x5fe <unstuff5>
 5d2:	50 27       	eor	r21, r16
 5d4:	10 27       	eor	r17, r16
 5d6:	10 fb       	bst	r17, 0
 5d8:	26 f9       	bld	r18, 6

000005da <didUnstuff6>:
 5da:	06 b2       	in	r0, 0x16	; 22
 5dc:	22 30       	cpi	r18, 0x02	; 2
 5de:	f0 f0       	brcs	.+60     	; 0x61c <unstuff6>

000005e0 <didUnstuff5>:
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <didUnstuff5+0x2>
 5e2:	16 b3       	in	r17, 0x16	; 22
 5e4:	01 27       	eor	r16, r17
 5e6:	00 fb       	bst	r16, 0
 5e8:	27 f9       	bld	r18, 7

000005ea <didUnstuff7>:
 5ea:	01 26       	eor	r0, r17
 5ec:	50 29       	or	r21, r0
 5ee:	06 b2       	in	r0, 0x16	; 22
 5f0:	24 30       	cpi	r18, 0x04	; 4
 5f2:	e8 f5       	brcc	.+122    	; 0x66e <rxLoop>

000005f4 <unstuff7>:
 5f4:	4f 77       	andi	r20, 0x7F	; 127
 5f6:	20 68       	ori	r18, 0x80	; 128
 5f8:	16 b3       	in	r17, 0x16	; 22
 5fa:	00 00       	nop
 5fc:	f6 cf       	rjmp	.-20     	; 0x5ea <didUnstuff7>

000005fe <unstuff5>:
 5fe:	50 27       	eor	r21, r16
 600:	4f 7d       	andi	r20, 0xDF	; 223
 602:	20 62       	ori	r18, 0x20	; 32
 604:	06 b2       	in	r0, 0x16	; 22
 606:	10 2f       	mov	r17, r16
 608:	00 00       	nop
 60a:	00 c0       	rjmp	.+0      	; 0x60c <unstuff5+0xe>
 60c:	06 b3       	in	r16, 0x16	; 22
 60e:	00 26       	eor	r0, r16
 610:	50 29       	or	r21, r0
 612:	10 27       	eor	r17, r16
 614:	10 fb       	bst	r17, 0
 616:	26 f9       	bld	r18, 6
 618:	06 b2       	in	r0, 0x16	; 22
 61a:	e2 cf       	rjmp	.-60     	; 0x5e0 <didUnstuff5>

0000061c <unstuff6>:
 61c:	4f 7b       	andi	r20, 0xBF	; 191
 61e:	06 b3       	in	r16, 0x16	; 22
 620:	20 64       	ori	r18, 0x40	; 64
 622:	00 c0       	rjmp	.+0      	; 0x624 <unstuff6+0x8>
 624:	da cf       	rjmp	.-76     	; 0x5da <didUnstuff6>

00000626 <unstuff0>:
 626:	01 26       	eor	r0, r17
 628:	50 29       	or	r21, r0
 62a:	15 70       	andi	r17, 0x05	; 5
 62c:	06 b2       	in	r0, 0x16	; 22
 62e:	69 f1       	breq	.+90     	; 0x68a <didUnstuff0>
 630:	4e 7f       	andi	r20, 0xFE	; 254
 632:	21 60       	ori	r18, 0x01	; 1
 634:	01 2f       	mov	r16, r17
 636:	16 b3       	in	r17, 0x16	; 22
 638:	28 c0       	rjmp	.+80     	; 0x68a <didUnstuff0>

0000063a <unstuff1>:
 63a:	00 26       	eor	r0, r16
 63c:	50 29       	or	r21, r0
 63e:	4d 7f       	andi	r20, 0xFD	; 253
 640:	06 b2       	in	r0, 0x16	; 22
 642:	22 60       	ori	r18, 0x02	; 2
 644:	10 2f       	mov	r17, r16
 646:	29 c0       	rjmp	.+82     	; 0x69a <didUnstuff1>

00000648 <unstuff2>:
 648:	01 26       	eor	r0, r17
 64a:	50 29       	or	r21, r0
 64c:	4b 7f       	andi	r20, 0xFB	; 251
 64e:	06 b2       	in	r0, 0x16	; 22
 650:	24 60       	ori	r18, 0x04	; 4
 652:	01 2f       	mov	r16, r17
 654:	2d c0       	rjmp	.+90     	; 0x6b0 <didUnstuff2>

00000656 <unstuff3>:
 656:	16 b3       	in	r17, 0x16	; 22
 658:	01 26       	eor	r0, r17
 65a:	50 29       	or	r21, r0
 65c:	47 7f       	andi	r20, 0xF7	; 247
 65e:	28 60       	ori	r18, 0x08	; 8
 660:	00 00       	nop
 662:	06 b2       	in	r0, 0x16	; 22
 664:	2e c0       	rjmp	.+92     	; 0x6c2 <didUnstuff3>

00000666 <unstuff4>:
 666:	4f 7e       	andi	r20, 0xEF	; 239
 668:	06 b3       	in	r16, 0x16	; 22
 66a:	20 61       	ori	r18, 0x10	; 16
 66c:	30 c0       	rjmp	.+96     	; 0x6ce <didUnstuff4>

0000066e <rxLoop>:
 66e:	42 27       	eor	r20, r18
 670:	06 b3       	in	r16, 0x16	; 22
 672:	49 93       	st	Y+, r20
 674:	00 26       	eor	r0, r16
 676:	50 29       	or	r21, r0
 678:	10 27       	eor	r17, r16
 67a:	06 b2       	in	r0, 0x16	; 22
 67c:	4f ef       	ldi	r20, 0xFF	; 255
 67e:	10 fb       	bst	r17, 0
 680:	20 f9       	bld	r18, 0
 682:	29 7f       	andi	r18, 0xF9	; 249

00000684 <rxbit1>:
 684:	16 b3       	in	r17, 0x16	; 22
 686:	79 f2       	breq	.-98     	; 0x626 <unstuff0>
 688:	15 70       	andi	r17, 0x05	; 5

0000068a <didUnstuff0>:
 68a:	59 f1       	breq	.+86     	; 0x6e2 <se0>
 68c:	01 26       	eor	r0, r17
 68e:	50 29       	or	r21, r0
 690:	06 b2       	in	r0, 0x16	; 22
 692:	01 27       	eor	r16, r17
 694:	00 fb       	bst	r16, 0
 696:	21 f9       	bld	r18, 1
 698:	23 7f       	andi	r18, 0xF3	; 243

0000069a <didUnstuff1>:
 69a:	06 b3       	in	r16, 0x16	; 22
 69c:	71 f2       	breq	.-100    	; 0x63a <unstuff1>
 69e:	00 26       	eor	r0, r16
 6a0:	50 29       	or	r21, r0
 6a2:	31 50       	subi	r19, 0x01	; 1
 6a4:	d0 f0       	brcs	.+52     	; 0x6da <overflow>
 6a6:	06 b2       	in	r0, 0x16	; 22
 6a8:	10 27       	eor	r17, r16
 6aa:	10 fb       	bst	r17, 0
 6ac:	22 f9       	bld	r18, 2
 6ae:	27 7e       	andi	r18, 0xE7	; 231

000006b0 <didUnstuff2>:
 6b0:	16 b3       	in	r17, 0x16	; 22
 6b2:	51 f2       	breq	.-108    	; 0x648 <unstuff2>
 6b4:	01 26       	eor	r0, r17
 6b6:	50 29       	or	r21, r0
 6b8:	01 27       	eor	r16, r17
 6ba:	00 fb       	bst	r16, 0
 6bc:	06 b2       	in	r0, 0x16	; 22
 6be:	23 f9       	bld	r18, 3
 6c0:	2f 7c       	andi	r18, 0xCF	; 207

000006c2 <didUnstuff3>:
 6c2:	49 f2       	breq	.-110    	; 0x656 <unstuff3>
 6c4:	00 00       	nop
 6c6:	06 b3       	in	r16, 0x16	; 22
 6c8:	10 27       	eor	r17, r16
 6ca:	10 fb       	bst	r17, 0
 6cc:	24 f9       	bld	r18, 4

000006ce <didUnstuff4>:
 6ce:	00 26       	eor	r0, r16
 6d0:	50 29       	or	r21, r0
 6d2:	06 b2       	in	r0, 0x16	; 22
 6d4:	2f 79       	andi	r18, 0x9F	; 159
 6d6:	39 f2       	breq	.-114    	; 0x666 <unstuff4>
 6d8:	70 cf       	rjmp	.-288    	; 0x5ba <continueWithBit5>

000006da <overflow>:
 6da:	10 e4       	ldi	r17, 0x40	; 64
 6dc:	1a bf       	out	0x3a, r17	; 58

000006de <ignorePacket>:
 6de:	00 27       	eor	r16, r16
 6e0:	19 c0       	rjmp	.+50     	; 0x714 <handleSetupOrOut>

000006e2 <se0>:
 6e2:	3b 50       	subi	r19, 0x0B	; 11
 6e4:	31 95       	neg	r19
 6e6:	c3 1b       	sub	r28, r19
 6e8:	d0 40       	sbci	r29, 0x00	; 0
 6ea:	10 e4       	ldi	r17, 0x40	; 64
 6ec:	1a bf       	out	0x3a, r17	; 58
 6ee:	08 81       	ld	r16, Y
 6f0:	03 3c       	cpi	r16, 0xC3	; 195
 6f2:	09 f1       	breq	.+66     	; 0x736 <handleData>
 6f4:	0b 34       	cpi	r16, 0x4B	; 75
 6f6:	f9 f0       	breq	.+62     	; 0x736 <handleData>
 6f8:	20 91 88 00 	lds	r18, 0x0088
 6fc:	19 81       	ldd	r17, Y+1	; 0x01
 6fe:	11 0f       	add	r17, r17
 700:	12 13       	cpse	r17, r18
 702:	ed cf       	rjmp	.-38     	; 0x6de <ignorePacket>
 704:	4a 81       	ldd	r20, Y+2	; 0x02
 706:	44 1f       	adc	r20, r20
 708:	09 36       	cpi	r16, 0x69	; 105
 70a:	51 f1       	breq	.+84     	; 0x760 <handleIn>
 70c:	0d 32       	cpi	r16, 0x2D	; 45
 70e:	11 f0       	breq	.+4      	; 0x714 <handleSetupOrOut>
 710:	01 3e       	cpi	r16, 0xE1	; 225
 712:	29 f7       	brne	.-54     	; 0x6de <ignorePacket>

00000714 <handleSetupOrOut>:
 714:	00 93 8f 00 	sts	0x008F, r16

00000718 <doReturn>:
 718:	3f 91       	pop	r19
 71a:	5f 91       	pop	r21
 71c:	4f 91       	pop	r20
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	2f 91       	pop	r18
 724:	df 91       	pop	r29
 726:	0f 90       	pop	r0
 728:	ca b7       	in	r28, 0x3a	; 58
 72a:	c6 fd       	sbrc	r28, 6
 72c:	1c cf       	rjmp	.-456    	; 0x566 <waitForJ>

0000072e <sofError>:
 72e:	cf 91       	pop	r28
 730:	cf bf       	out	0x3f, r28	; 63
 732:	cf 91       	pop	r28
 734:	18 95       	reti

00000736 <handleData>:
 736:	00 91 8f 00 	lds	r16, 0x008F
 73a:	00 23       	and	r16, r16
 73c:	69 f3       	breq	.-38     	; 0x718 <doReturn>
 73e:	10 91 8d 00 	lds	r17, 0x008D
 742:	11 23       	and	r17, r17
 744:	79 f5       	brne	.+94     	; 0x7a4 <sendNakAndReti>
 746:	34 30       	cpi	r19, 0x04	; 4
 748:	7a f1       	brmi	.+94     	; 0x7a8 <sendAckAndReti>
 74a:	30 93 8d 00 	sts	0x008D, r19
 74e:	00 93 89 00 	sts	0x0089, r16
 752:	10 91 8a 00 	lds	r17, 0x008A
 756:	3b e0       	ldi	r19, 0x0B	; 11
 758:	31 1b       	sub	r19, r17
 75a:	30 93 8a 00 	sts	0x008A, r19
 75e:	24 c0       	rjmp	.+72     	; 0x7a8 <sendAckAndReti>

00000760 <handleIn>:
 760:	00 91 8d 00 	lds	r16, 0x008D
 764:	01 30       	cpi	r16, 0x01	; 1
 766:	f4 f4       	brge	.+60     	; 0x7a4 <sendNakAndReti>
 768:	0a e5       	ldi	r16, 0x5A	; 90
 76a:	4f 70       	andi	r20, 0x0F	; 15
 76c:	49 f4       	brne	.+18     	; 0x780 <handleIn1>
 76e:	30 91 61 00 	lds	r19, 0x0061
 772:	34 fd       	sbrc	r19, 4
 774:	1a c0       	rjmp	.+52     	; 0x7aa <sendCntAndReti>
 776:	00 93 61 00 	sts	0x0061, r16
 77a:	c2 e7       	ldi	r28, 0x72	; 114
 77c:	d0 e0       	ldi	r29, 0x00	; 0
 77e:	19 c0       	rjmp	.+50     	; 0x7b2 <usbSendAndReti>

00000780 <handleIn1>:
 780:	30 91 62 00 	lds	r19, 0x0062
 784:	34 fd       	sbrc	r19, 4
 786:	11 c0       	rjmp	.+34     	; 0x7aa <sendCntAndReti>
 788:	00 93 62 00 	sts	0x0062, r16
 78c:	cd e7       	ldi	r28, 0x7D	; 125
 78e:	d0 e0       	ldi	r29, 0x00	; 0
 790:	10 c0       	rjmp	.+32     	; 0x7b2 <usbSendAndReti>

00000792 <bitstuff7>:
 792:	05 27       	eor	r16, r21
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	00 c0       	rjmp	.+0      	; 0x798 <bitstuff7+0x6>
 798:	21 c0       	rjmp	.+66     	; 0x7dc <didStuff7>

0000079a <bitstuffN>:
 79a:	05 27       	eor	r16, r21
 79c:	10 e0       	ldi	r17, 0x00	; 0
 79e:	c8 95       	lpm
 7a0:	08 bb       	out	0x18, r16	; 24
 7a2:	14 c0       	rjmp	.+40     	; 0x7cc <didStuffN>

000007a4 <sendNakAndReti>:
 7a4:	3a e5       	ldi	r19, 0x5A	; 90
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <sendCntAndReti>

000007a8 <sendAckAndReti>:
 7a8:	32 ed       	ldi	r19, 0xD2	; 210

000007aa <sendCntAndReti>:
 7aa:	03 2e       	mov	r0, r19
 7ac:	c0 e0       	ldi	r28, 0x00	; 0
 7ae:	d0 e0       	ldi	r29, 0x00	; 0
 7b0:	32 e0       	ldi	r19, 0x02	; 2

000007b2 <usbSendAndReti>:
 7b2:	17 b3       	in	r17, 0x17	; 23
 7b4:	15 60       	ori	r17, 0x05	; 5
 7b6:	c0 9a       	sbi	0x18, 0	; 24
 7b8:	08 b3       	in	r16, 0x18	; 24
 7ba:	17 bb       	out	0x17, r17	; 23
 7bc:	55 e0       	ldi	r21, 0x05	; 5
 7be:	20 e8       	ldi	r18, 0x80	; 128
 7c0:	4f ef       	ldi	r20, 0xFF	; 255

000007c2 <bitloop>:
 7c2:	20 ff       	sbrs	r18, 0
 7c4:	05 27       	eor	r16, r21
 7c6:	08 bb       	out	0x18, r16	; 24
 7c8:	27 95       	ror	r18
 7ca:	17 95       	ror	r17

000007cc <didStuffN>:
 7cc:	1c 3f       	cpi	r17, 0xFC	; 252
 7ce:	28 f7       	brcc	.-54     	; 0x79a <bitstuffN>
 7d0:	00 00       	nop
 7d2:	45 52       	subi	r20, 0x25	; 37
 7d4:	b0 f7       	brcc	.-20     	; 0x7c2 <bitloop>
 7d6:	20 ff       	sbrs	r18, 0
 7d8:	05 27       	eor	r16, r21
 7da:	27 95       	ror	r18

000007dc <didStuff7>:
 7dc:	08 bb       	out	0x18, r16	; 24
 7de:	17 95       	ror	r17
 7e0:	1c 3f       	cpi	r17, 0xFC	; 252
 7e2:	b8 f6       	brcc	.-82     	; 0x792 <bitstuff7>
 7e4:	29 91       	ld	r18, Y+
 7e6:	3a 95       	dec	r19
 7e8:	61 f7       	brne	.-40     	; 0x7c2 <bitloop>
 7ea:	0a 7f       	andi	r16, 0xFA	; 250
 7ec:	10 91 8e 00 	lds	r17, 0x008E
 7f0:	11 0f       	add	r17, r17
 7f2:	08 bb       	out	0x18, r16	; 24
 7f4:	c2 50       	subi	r28, 0x02	; 2
 7f6:	d0 40       	sbci	r29, 0x00	; 0
 7f8:	11 f0       	breq	.+4      	; 0x7fe <skipAddrAssign>
 7fa:	10 93 88 00 	sts	0x0088, r17

000007fe <skipAddrAssign>:
 7fe:	10 e4       	ldi	r17, 0x40	; 64
 800:	1a bf       	out	0x3a, r17	; 58
 802:	01 60       	ori	r16, 0x01	; 1
 804:	17 b3       	in	r17, 0x17	; 23
 806:	1a 7f       	andi	r17, 0xFA	; 250
 808:	40 2f       	mov	r20, r16
 80a:	4a 7f       	andi	r20, 0xFA	; 250
 80c:	54 e0       	ldi	r21, 0x04	; 4

0000080e <se0Delay>:
 80e:	5a 95       	dec	r21
 810:	f1 f7       	brne	.-4      	; 0x80e <se0Delay>
 812:	08 bb       	out	0x18, r16	; 24
 814:	17 bb       	out	0x17, r17	; 23
 816:	48 bb       	out	0x18, r20	; 24
 818:	7f cf       	rjmp	.-258    	; 0x718 <doReturn>

0000081a <do_rand>:
 81a:	a0 e0       	ldi	r26, 0x00	; 0
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	e2 e1       	ldi	r30, 0x12	; 18
 820:	f4 e0       	ldi	r31, 0x04	; 4
 822:	a7 c0       	rjmp	.+334    	; 0x972 <__prologue_saves__+0x10>
 824:	ec 01       	movw	r28, r24
 826:	68 81       	ld	r22, Y
 828:	79 81       	ldd	r23, Y+1	; 0x01
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	9b 81       	ldd	r25, Y+3	; 0x03
 82e:	61 15       	cp	r22, r1
 830:	71 05       	cpc	r23, r1
 832:	81 05       	cpc	r24, r1
 834:	91 05       	cpc	r25, r1
 836:	49 f4       	brne	.+18     	; 0x84a <do_rand+0x30>
 838:	84 e2       	ldi	r24, 0x24	; 36
 83a:	a8 2e       	mov	r10, r24
 83c:	89 ed       	ldi	r24, 0xD9	; 217
 83e:	b8 2e       	mov	r11, r24
 840:	8b e5       	ldi	r24, 0x5B	; 91
 842:	c8 2e       	mov	r12, r24
 844:	87 e0       	ldi	r24, 0x07	; 7
 846:	d8 2e       	mov	r13, r24
 848:	02 c0       	rjmp	.+4      	; 0x84e <do_rand+0x34>
 84a:	5b 01       	movw	r10, r22
 84c:	6c 01       	movw	r12, r24
 84e:	c6 01       	movw	r24, r12
 850:	b5 01       	movw	r22, r10
 852:	2d e1       	ldi	r18, 0x1D	; 29
 854:	33 ef       	ldi	r19, 0xF3	; 243
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	68 d0       	rcall	.+208    	; 0x92c <__divmodsi4>
 85c:	27 ea       	ldi	r18, 0xA7	; 167
 85e:	31 e4       	ldi	r19, 0x41	; 65
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	4a d0       	rcall	.+148    	; 0x8fa <__mulsi3>
 866:	7b 01       	movw	r14, r22
 868:	8c 01       	movw	r16, r24
 86a:	c6 01       	movw	r24, r12
 86c:	b5 01       	movw	r22, r10
 86e:	2d e1       	ldi	r18, 0x1D	; 29
 870:	33 ef       	ldi	r19, 0xF3	; 243
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	5a d0       	rcall	.+180    	; 0x92c <__divmodsi4>
 878:	ca 01       	movw	r24, r20
 87a:	b9 01       	movw	r22, r18
 87c:	24 e1       	ldi	r18, 0x14	; 20
 87e:	3b e0       	ldi	r19, 0x0B	; 11
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	3a d0       	rcall	.+116    	; 0x8fa <__mulsi3>
 886:	e6 1a       	sub	r14, r22
 888:	f7 0a       	sbc	r15, r23
 88a:	08 0b       	sbc	r16, r24
 88c:	19 0b       	sbc	r17, r25
 88e:	d8 01       	movw	r26, r16
 890:	c7 01       	movw	r24, r14
 892:	17 ff       	sbrs	r17, 7
 894:	04 c0       	rjmp	.+8      	; 0x89e <do_rand+0x84>
 896:	81 50       	subi	r24, 0x01	; 1
 898:	90 40       	sbci	r25, 0x00	; 0
 89a:	a0 40       	sbci	r26, 0x00	; 0
 89c:	b0 48       	sbci	r27, 0x80	; 128
 89e:	88 83       	st	Y, r24
 8a0:	99 83       	std	Y+1, r25	; 0x01
 8a2:	aa 83       	std	Y+2, r26	; 0x02
 8a4:	bb 83       	std	Y+3, r27	; 0x03
 8a6:	9f 77       	andi	r25, 0x7F	; 127
 8a8:	ea e0       	ldi	r30, 0x0A	; 10
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	7d c0       	rjmp	.+250    	; 0x9aa <__epilogue_restores__+0x10>

000008b0 <rand_r>:
 8b0:	b4 df       	rcall	.-152    	; 0x81a <do_rand>
 8b2:	08 95       	ret

000008b4 <rand>:
 8b4:	83 e6       	ldi	r24, 0x63	; 99
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	b0 df       	rcall	.-160    	; 0x81a <do_rand>
 8ba:	08 95       	ret

000008bc <srand>:
 8bc:	a0 e0       	ldi	r26, 0x00	; 0
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	80 93 63 00 	sts	0x0063, r24
 8c4:	90 93 64 00 	sts	0x0064, r25
 8c8:	a0 93 65 00 	sts	0x0065, r26
 8cc:	b0 93 66 00 	sts	0x0066, r27
 8d0:	08 95       	ret

000008d2 <__eeprom_read_byte_1C1D1E>:
 8d2:	e1 99       	sbic	0x1c, 1	; 28
 8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <__eeprom_read_byte_1C1D1E>
 8d6:	bf bb       	out	0x1f, r27	; 31
 8d8:	ae bb       	out	0x1e, r26	; 30
 8da:	e0 9a       	sbi	0x1c, 0	; 28
 8dc:	11 96       	adiw	r26, 0x01	; 1
 8de:	0d b2       	in	r0, 0x1d	; 29
 8e0:	08 95       	ret

000008e2 <__eeprom_write_byte_1C1D1E>:
 8e2:	e1 99       	sbic	0x1c, 1	; 28
 8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <__eeprom_write_byte_1C1D1E>
 8e6:	bf bb       	out	0x1f, r27	; 31
 8e8:	ae bb       	out	0x1e, r26	; 30
 8ea:	0d ba       	out	0x1d, r0	; 29
 8ec:	11 96       	adiw	r26, 0x01	; 1
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	e2 9a       	sbi	0x1c, 2	; 28
 8f4:	e1 9a       	sbi	0x1c, 1	; 28
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	08 95       	ret

000008fa <__mulsi3>:
 8fa:	ff 27       	eor	r31, r31
 8fc:	ee 27       	eor	r30, r30
 8fe:	bb 27       	eor	r27, r27
 900:	aa 27       	eor	r26, r26

00000902 <__mulsi3_loop>:
 902:	60 ff       	sbrs	r22, 0
 904:	04 c0       	rjmp	.+8      	; 0x90e <__mulsi3_skip1>
 906:	a2 0f       	add	r26, r18
 908:	b3 1f       	adc	r27, r19
 90a:	e4 1f       	adc	r30, r20
 90c:	f5 1f       	adc	r31, r21

0000090e <__mulsi3_skip1>:
 90e:	22 0f       	add	r18, r18
 910:	33 1f       	adc	r19, r19
 912:	44 1f       	adc	r20, r20
 914:	55 1f       	adc	r21, r21
 916:	96 95       	lsr	r25
 918:	87 95       	ror	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	89 f7       	brne	.-30     	; 0x902 <__mulsi3_loop>
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	76 07       	cpc	r23, r22
 924:	71 f7       	brne	.-36     	; 0x902 <__mulsi3_loop>

00000926 <__mulsi3_exit>:
 926:	cf 01       	movw	r24, r30
 928:	bd 01       	movw	r22, r26
 92a:	08 95       	ret

0000092c <__divmodsi4>:
 92c:	97 fb       	bst	r25, 7
 92e:	09 2e       	mov	r0, r25
 930:	05 26       	eor	r0, r21
 932:	0e d0       	rcall	.+28     	; 0x950 <__divmodsi4_neg1>
 934:	57 fd       	sbrc	r21, 7
 936:	04 d0       	rcall	.+8      	; 0x940 <__divmodsi4_neg2>
 938:	4b d0       	rcall	.+150    	; 0x9d0 <__udivmodsi4>
 93a:	0a d0       	rcall	.+20     	; 0x950 <__divmodsi4_neg1>
 93c:	00 1c       	adc	r0, r0
 93e:	38 f4       	brcc	.+14     	; 0x94e <__divmodsi4_exit>

00000940 <__divmodsi4_neg2>:
 940:	50 95       	com	r21
 942:	40 95       	com	r20
 944:	30 95       	com	r19
 946:	21 95       	neg	r18
 948:	3f 4f       	sbci	r19, 0xFF	; 255
 94a:	4f 4f       	sbci	r20, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255

0000094e <__divmodsi4_exit>:
 94e:	08 95       	ret

00000950 <__divmodsi4_neg1>:
 950:	f6 f7       	brtc	.-4      	; 0x94e <__divmodsi4_exit>
 952:	90 95       	com	r25
 954:	80 95       	com	r24
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__prologue_saves__>:
 962:	2f 92       	push	r2
 964:	3f 92       	push	r3
 966:	4f 92       	push	r4
 968:	5f 92       	push	r5
 96a:	6f 92       	push	r6
 96c:	7f 92       	push	r7
 96e:	8f 92       	push	r8
 970:	9f 92       	push	r9
 972:	af 92       	push	r10
 974:	bf 92       	push	r11
 976:	cf 92       	push	r12
 978:	df 92       	push	r13
 97a:	ef 92       	push	r14
 97c:	ff 92       	push	r15
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	ca 1b       	sub	r28, r26
 98c:	db 0b       	sbc	r29, r27
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	09 94       	ijmp

0000099a <__epilogue_restores__>:
 99a:	2a 88       	ldd	r2, Y+18	; 0x12
 99c:	39 88       	ldd	r3, Y+17	; 0x11
 99e:	48 88       	ldd	r4, Y+16	; 0x10
 9a0:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a2:	6e 84       	ldd	r6, Y+14	; 0x0e
 9a4:	7d 84       	ldd	r7, Y+13	; 0x0d
 9a6:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a8:	9b 84       	ldd	r9, Y+11	; 0x0b
 9aa:	aa 84       	ldd	r10, Y+10	; 0x0a
 9ac:	b9 84       	ldd	r11, Y+9	; 0x09
 9ae:	c8 84       	ldd	r12, Y+8	; 0x08
 9b0:	df 80       	ldd	r13, Y+7	; 0x07
 9b2:	ee 80       	ldd	r14, Y+6	; 0x06
 9b4:	fd 80       	ldd	r15, Y+5	; 0x05
 9b6:	0c 81       	ldd	r16, Y+4	; 0x04
 9b8:	1b 81       	ldd	r17, Y+3	; 0x03
 9ba:	aa 81       	ldd	r26, Y+2	; 0x02
 9bc:	b9 81       	ldd	r27, Y+1	; 0x01
 9be:	ce 0f       	add	r28, r30
 9c0:	d1 1d       	adc	r29, r1
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	ed 01       	movw	r28, r26
 9ce:	08 95       	ret

000009d0 <__udivmodsi4>:
 9d0:	a1 e2       	ldi	r26, 0x21	; 33
 9d2:	1a 2e       	mov	r1, r26
 9d4:	aa 1b       	sub	r26, r26
 9d6:	bb 1b       	sub	r27, r27
 9d8:	fd 01       	movw	r30, r26
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__udivmodsi4_ep>

000009dc <__udivmodsi4_loop>:
 9dc:	aa 1f       	adc	r26, r26
 9de:	bb 1f       	adc	r27, r27
 9e0:	ee 1f       	adc	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	a2 17       	cp	r26, r18
 9e6:	b3 07       	cpc	r27, r19
 9e8:	e4 07       	cpc	r30, r20
 9ea:	f5 07       	cpc	r31, r21
 9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__udivmodsi4_ep>
 9ee:	a2 1b       	sub	r26, r18
 9f0:	b3 0b       	sbc	r27, r19
 9f2:	e4 0b       	sbc	r30, r20
 9f4:	f5 0b       	sbc	r31, r21

000009f6 <__udivmodsi4_ep>:
 9f6:	66 1f       	adc	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	1a 94       	dec	r1
 a00:	69 f7       	brne	.-38     	; 0x9dc <__udivmodsi4_loop>
 a02:	60 95       	com	r22
 a04:	70 95       	com	r23
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	bd 01       	movw	r22, r26
 a10:	cf 01       	movw	r24, r30
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	ff cf       	rjmp	.-2      	; 0xa14 <_exit>
